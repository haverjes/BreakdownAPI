/**
 * BreakDownAPI
 * Backend API for the BreakDown app service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServiceTicket from '../model/ServiceTicket';

/**
* ServiceTicketOps service.
* @module api/ServiceTicketOpsApi
* @version 1.0.0
*/
export default class ServiceTicketOpsApi {

    /**
    * Constructs a new ServiceTicketOpsApi. 
    * @alias module:api/ServiceTicketOpsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTicket operation.
     * @callback module:api/ServiceTicketOpsApi~addTicketCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds an service Ticket
     * Adds an Ticket to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceTicket} opts.serviceTicket Ticket item to add
     * @param {module:api/ServiceTicketOpsApi~addTicketCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTicket(opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceTicket'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tickets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTickets operation.
     * @callback module:api/ServiceTicketOpsApi~searchTicketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceTicket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch service tickets
     * By passing in the appropriate options, you can search for available tickets in the system
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/ServiceTicketOpsApi~searchTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceTicket>}
     */
    searchTickets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceTicket];
      return this.apiClient.callApi(
        '/tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTicket operation.
     * @callback module:api/ServiceTicketOpsApi~updateTicketCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds an service Ticket
     * Updates an Ticket to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/ServiceTicket} opts.serviceTicket Ticket item to update
     * @param {module:api/ServiceTicketOpsApi~updateTicketCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTicket(opts, callback) {
      opts = opts || {};
      let postBody = opts['serviceTicket'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tickets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
